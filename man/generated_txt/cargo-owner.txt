CARGO-OWNER(1)

NAME
       cargo-owner - Manage the owners of a crate on the registry

SYNOPSIS
       cargo owner [options] --add login [crate]
       cargo owner [options] --remove login [crate]
       cargo owner [options] --list [crate]

DESCRIPTION
       This command will modify the owners for a crate on the registry. Owners
       of a crate can upload new versions and yank old versions. Non-team
       owners can also modify the set of owners, so take care!

       This command requires you to be authenticated with either the --token
       option or using cargo-login(1).

       If the crate name is not specified, it will use the package name from
       the current directory.

       See the reference
       <https://doc.rust-lang.org/cargo/reference/publishing.html#cargo-owner>
       for more information about owners and publishing.

OPTIONS
   Owner Options
       -a, --add login...
           Invite the given user or team as an owner.

       -r, --remove login...
           Remove the given user or team as an owner.

       -l, --list
           List owners of a crate.

       --token token
           API token to use when authenticating. This overrides the token
           stored in the credentials file (which is created by cargo-login(1)).

           Cargo config <https://doc.rust-lang.org/cargo/reference/config.html>
           environment variables can be used to override the tokens stored in
           the credentials file. The token for crates.io may be specified with
           the CARGO_REGISTRY_TOKEN environment variable. Tokens for other
           registries may be specified with environment variables of the form
           CARGO_REGISTRIES_NAME_TOKEN where NAME is the name of the registry
           in all capital letters.

       --index index
           The URL of the registry index to use.

       --registry registry
           Name of the registry to use. Registry names are defined in Cargo
           config files
           <https://doc.rust-lang.org/cargo/reference/config.html>. If not
           specified, the default registry is used, which is defined by the
           registry.default config key which defaults to crates-io.

   Display Options
       -v, --verbose

           启用更加详细的输出。可两次使用来显示"非常详细"的输出，其中包含了诸如
           依赖警告 以及 构建脚本输出 等额外的输出内容。
           也可通过term.verbose指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       -q, --quiet
           不输出Cargo的日志信息。也可通过term.quiet指定。
           config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --color when
           控制输出内容的颜色。有效取值如下：

           o  auto
              (默认)：自动检测终端是否支持带颜色的输出。

           o  always：总显示带颜色的输出。

           o  never：从不显示带颜色的输出。

           也可通过term.color指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

   Common Options
       +toolchain
           If Cargo has been installed with rustup, and the first argument to
           cargo begins with +, it will be interpreted as a rustup toolchain
           name (such as +stable or +nightly). See the rustup documentation
           <https://rust-lang.github.io/rustup/overrides.html> for more
           information about how toolchain overrides work.

       -h, --help
           Prints help information.

       -Z flag
           Unstable (nightly-only) flags to Cargo. Run cargo -Z help for
           details.

环境
       关于Cargo所读取的环境变量，可参见the reference
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html>

退出状态
       o  0: Cargo命令执行成功

       o  101: Cargo命令未能完成.

EXAMPLES
       1. List owners of a package:

              cargo owner --list foo

       2. Invite an owner to a package:

              cargo owner --add username foo

       3. Remove an owner from a package:

              cargo owner --remove username foo

SEE ALSO
       cargo(1), cargo-login(1), cargo-publish(1)

