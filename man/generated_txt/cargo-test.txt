CARGO-TEST(1)

NAME
       cargo-test - Execute unit and integration tests of a package

SYNOPSIS
       cargo test [options] [testname] [-- test-options]

DESCRIPTION
       Compile and execute unit and integration tests.

       The test filtering argument TESTNAME and all the arguments following the
       two dashes (--) are passed to the test binaries and thus to libtest
       (rustc's built in unit-test and micro-benchmarking framework). If you're
       passing arguments to both Cargo and the binary, the ones after -- go to
       the binary, the ones before go to Cargo. For details about libtest's
       arguments see the output of cargo test -- --help and check out the rustc
       book's chapter on how tests work at
       <https://doc.rust-lang.org/rustc/tests/index.html>.

       As an example, this will filter for tests with foo in their name and run
       them on 3 threads in parallel:

           cargo test foo -- --test-threads 3

       Tests are built with the --test option to rustc which creates an
       executable with a main function that automatically runs all functions
       annotated with the #[test] attribute in multiple threads. #[bench]
       annotated functions will also be run with one iteration to verify that
       they are functional.

       The libtest harness may be disabled by setting harness = false in the
       target manifest settings, in which case your code will need to provide
       its own main function to handle running tests.

       Documentation tests are also run by default, which is handled by
       rustdoc. It extracts code samples from documentation comments and
       executes them. See the rustdoc book <https://doc.rust-lang.org/rustdoc/>
       for more information on writing doc tests.

OPTIONS
   Test Options
       --no-run
           Compile, but don't run tests.

       --no-fail-fast
           Run all tests regardless of failure. Without this flag, Cargo will
           exit after the first executable fails. The Rust test harness will
           run all tests within the executable to completion, this flag only
           applies to the executable as a whole.

   选择包

       默认情况下，如果没有指定包，则根据清单文件来选择包(如果没有通过--manifest-path给出清单文件路径，
       则基于当前工作目录进行寻找)。如果是某个工作区的根清单，则选中该工作区的默认成员；否则仅选中清
       单所定义的那个包。


       工作区的默认成员可通过清单中workspace.default-members项来显式指定。如果未指定，则其虚拟
       工作区会包含全体工作区成员(等同于传递--workspace标志参数时)，而非虚拟工作区则仅包含根部箱自身。

       -p spec..., --package spec...
           Test指定包. SPEC的格式参见 cargo-pkgid(1) 。
           此标志参数可多次使用且支持Unix通配符(*, ? 和
           [])。不过，为避免shell可能错误地在Cargo获取到
           之前就将通配符展开，应在各个模式串两侧使用单引号或双引号。

       --workspace
           Test 工作区中的全体成员.

       --all
           --workspace的已废弃的别名。

       --exclude SPEC...
           排除指定包。必须与--workspace标志参数共同使用。
           此标志参数可多次使用且支持Unix通配符(*, ? 和
           [])。不过，为避免shell可能错误地在Cargo获取到
           之前就将通配符展开，应在各个模式串两侧使用单引号或双引号。

   Target Selection
       When no target selection options are given, cargo test will build the
       following targets of the selected packages:

       o  lib — used to link with binaries, examples, integration tests, and
          doc tests

       o  bins (only if integration tests are built and required features are
          available)

       o  examples — to ensure they compile

       o  lib as a unit test

       o  bins as unit tests

       o  integration tests

       o  doc tests for the lib target

       The default behavior can be changed by setting the test flag for the
       target in the manifest settings. Setting examples to test = true will
       build and run the example as a test. Setting targets to test = false
       will stop them from being tested by default. Target selection options
       that take a target by name ignore the test flag and will always test the
       given target.

       Doc tests for libraries may be disabled by setting doctest = false for
       the library in the manifest.

       Binary targets are automatically built if there is an integration test
       or benchmark. This allows an integration test to execute the binary to
       exercise and test its behavior. The CARGO_BIN_EXE_<name> environment
       variable
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-crates>
       is set when the integration test is built so that it can use the env
       macro <https://doc.rust-lang.org/std/macro.env.html> to locate the
       executable.

       Passing target selection flags will test only the specified targets.

       Note that --bin, --example, --test and --bench flags also support common
       Unix glob patterns like *, ? and []. However, to avoid your shell
       accidentally expanding glob patterns before Cargo handles them, you must
       use single quotes or double quotes around each glob pattern.

       --lib
           Test the package's library.

       --bin name...
           Test the specified binary. This flag may be specified multiple times
           and supports common Unix glob patterns.

       --bins
           Test all binary targets.

       --example name...
           Test the specified example. This flag may be specified multiple
           times and supports common Unix glob patterns.

       --examples
           Test all example targets.

       --test name...
           Test the specified integration test. This flag may be specified
           multiple times and supports common Unix glob patterns.

       --tests
           Test all targets in test mode that have the test = true manifest
           flag set. By default this includes the library and binaries built as
           unittests, and integration tests. Be aware that this will also build
           any required dependencies, so the lib target may be built twice
           (once as a unittest, and once as a dependency for binaries,
           integration tests, etc.). Targets may be enabled or disabled by
           setting the test flag in the manifest settings for the target.

       --bench name...
           Test the specified benchmark. This flag may be specified multiple
           times and supports common Unix glob patterns.

       --benches
           Test all targets in benchmark mode that have the bench = true
           manifest flag set. By default this includes the library and binaries
           built as benchmarks, and bench targets. Be aware that this will also
           build any required dependencies, so the lib target may be built
           twice (once as a benchmark, and once as a dependency for binaries,
           benchmarks, etc.). Targets may be enabled or disabled by setting the
           bench flag in the manifest settings for the target.

       --all-targets
           Test all targets. This is equivalent to specifying --lib --bins
           --tests --benches --examples.

       --doc
           Test only the library's documentation. This cannot be mixed with
           other target options.

   特性选择

       可通过传递特性参数来控制启用哪些特性。如果没有给定要使用的特性，
       则每个已选择的包都会自动使用default特性。

       详见the features documentation
       <https://doc.rust-lang.org/cargo/reference/features.html#command-line-feature-options>。

       --features features

           传递以空格或者逗号分隔的列表，其中给出要启用的特性。工作区成员的特性可通过包名/特性名的语法启用。
           此参数可多次给定，以分别启用给定的特性。

       --all-features
           为给定的包启用全部可用特性

       --no-default-features
           不启用给定包的default特性

   Compilation Options
       --target triple
           为指定架构执行 Test
           。默认情况下为本机的架构。三元组的格式为
           <arch><sub>-<vendor>-<sys>-<abi>。执行 rustc --print target-list
           可得到支持的构建目标列表。

           也可通过build.target指定(config value
           <https://doc.rust-lang.org/cargo/reference/config.html>)。


           注意，指定该标志参数会使Cargo产生的构建工件放在与平常不同的目录下。
           详情参见build cache
           <https://doc.rust-lang.org/cargo/guide/build-cache.html>

       -r, --release
           Test optimized artifacts with the release profile. See also the
           --profile option for choosing a specific profile by name.

       --profile name
           Test with the given profile. See the the reference
           <https://doc.rust-lang.org/cargo/reference/profiles.html> for more
           details on profiles.

       --ignore-rust-version
           Test the target even if the selected Rust compiler is older than the
           required Rust version as configured in the project's rust-version
           field.

   Output Options
       --target-dir directory

           用于存放生成的工件以及中间文件的目录。也可通过环境变量CARGO_TARGET_DIR
           或 build.target-dir config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。

           默认情况下为根工作区中的target目录。

   Display Options
       By default the Rust test harness hides output from test execution to
       keep results readable. Test output can be recovered (e.g., for
       debugging) by passing --nocapture to the test binaries:

           cargo test -- --nocapture

       -v, --verbose

           启用更加详细的输出。可两次使用来显示"非常详细"的输出，其中包含了诸如
           依赖警告 以及 构建脚本输出 等额外的输出内容。
           也可通过term.verbose指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       -q, --quiet
           不输出Cargo的日志信息。也可通过term.quiet指定。
           config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --color when
           控制输出内容的颜色。有效取值如下：

           o  auto
              (默认)：自动检测终端是否支持带颜色的输出。

           o  always：总显示带颜色的输出。

           o  never：从不显示带颜色的输出。

           也可通过term.color指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --message-format fmt
           The output format for diagnostic messages. Can be specified multiple
           times and consists of comma-separated values. Valid values:

           o  human (default): Display in a human-readable text format.
              Conflicts with short and json.

           o  short: Emit shorter, human-readable text messages. Conflicts with
              human and json.

           o  json: Emit JSON messages to stdout. See the reference
              <https://doc.rust-lang.org/cargo/reference/external-tools.html#json-messages>
              for more details. Conflicts with human and short.

           o  json-diagnostic-short: Ensure the rendered field of JSON messages
              contains the "short" rendering from rustc. Cannot be used with
              human or short.

           o  json-diagnostic-rendered-ansi: Ensure the rendered field of JSON
              messages contains embedded ANSI color codes for respecting
              rustc's default color scheme. Cannot be used with human or short.

           o  json-render-diagnostics: Instruct Cargo to not include rustc
              diagnostics in in JSON messages printed, but instead Cargo itself
              should render the JSON diagnostics coming from rustc. Cargo's own
              JSON diagnostics and others coming from rustc are still emitted.
              Cannot be used with human or short.

   Manifest Options
       --manifest-path path

           用于指定Cargo.toml文件的路径。默认情况下，Cargo会在当前目录或上级目录中寻找Cargo.toml文件。

       --frozen, --locked

           这两个选项用于保证Cargo.lock文件是最新的。如果该锁文件不存在，或者不是最新的，Cargo
           会报错退出。其中--frozen选项会阻止Cargo访问网络以检查锁文件是否是最新的。


           这些选项，可用于保证Cargo.lock文件是最新的(比如持续集成的构建过程)，
           或用于避免联网。

       --offline

           禁止Cargo访问网络。如果不添加此选项，Cargo在需要访问网络但网络不可用的情况下，会报错
           并停止工作。添加此选项后，Cargo会尽可能尝试不使用网络来工作。


           注意，在此情况下可能会产生与联网状态下不同的依赖解析(Dependency
           Resolution)结果。
           Cargo只会使用本地已下载的crate，即便本地的索引副本中表明可能有新版本crate。在离线前下载
           所需依赖的方法，参见 cargo-fetch(1) 。

           也可以通过 net.offline config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。

   Common Options
       +toolchain
           If Cargo has been installed with rustup, and the first argument to
           cargo begins with +, it will be interpreted as a rustup toolchain
           name (such as +stable or +nightly). See the rustup documentation
           <https://rust-lang.github.io/rustup/overrides.html> for more
           information about how toolchain overrides work.

       -h, --help
           Prints help information.

       -Z flag
           Unstable (nightly-only) flags to Cargo. Run cargo -Z help for
           details.

   Miscellaneous Options
       The --jobs argument affects the building of the test executable but does
       not affect how many threads are used when running the tests. The Rust
       test harness includes an option to control the number of threads used:

           cargo test -j 2 -- --test-threads=2

       -j N, --jobs N
           要并行运行的作业数量。也可通过build.jobs config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。
           默认为CPU数量。

       --future-incompat-report
           Displays a future-incompat report for any future-incompatible
           warnings produced during execution of this command

           See cargo-report(1)

环境
       关于Cargo所读取的环境变量，可参见the reference
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html>

退出状态
       o  0: Cargo命令执行成功

       o  101: Cargo命令未能完成.

EXAMPLES
       1. Execute all the unit and integration tests of the current package:

              cargo test

       2. Run only tests whose names match against a filter string:

              cargo test name_filter

       3. Run only a specific test within a specific integration test:

              cargo test --test int_test_name -- modname::test_name

SEE ALSO
       cargo(1), cargo-bench(1)

