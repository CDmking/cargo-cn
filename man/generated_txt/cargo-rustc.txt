CARGO-RUSTC(1)

NAME
       cargo-rustc - Compile the current package, and pass extra options to the
       compiler

SYNOPSIS
       cargo rustc [options] [-- args]

DESCRIPTION
       The specified target for the current package (or package specified by -p
       if provided) will be compiled along with all of its dependencies. The
       specified args will all be passed to the final compiler invocation, not
       any of the dependencies. Note that the compiler will still
       unconditionally receive arguments such as -L, --extern, and
       --crate-type, and the specified args will simply be added to the
       compiler invocation.

       See <https://doc.rust-lang.org/rustc/index.html> for documentation on
       rustc flags.

       This command requires that only one target is being compiled when
       additional arguments are provided. If more than one target is available
       for the current package the filters of --lib, --bin, etc, must be used
       to select which target is compiled.

       To pass flags to all compiler processes spawned by Cargo, use the
       RUSTFLAGS environment variable
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html>
       or the build.rustflags config value
       <https://doc.rust-lang.org/cargo/reference/config.html>.

OPTIONS
   Package Selection
       By default, the package in the current working directory is selected.
       The -p flag can be used to choose a different package in a workspace.

       -p spec, --package spec
           The package to build. See cargo-pkgid(1) for the SPEC format.

   Target Selection
       When no target selection options are given, cargo rustc will build all
       binary and library targets of the selected package.

       Passing target selection flags will build only the specified targets.

       Note that --bin, --example, --test and --bench flags also support common
       Unix glob patterns like *, ? and []. However, to avoid your shell
       accidentally expanding glob patterns before Cargo handles them, you must
       use single quotes or double quotes around each glob pattern.

       --lib
           Build the package's library.

       --bin name...
           Build the specified binary. This flag may be specified multiple
           times and supports common Unix glob patterns.

       --bins
           Build all binary targets.

       --example name...
           Build the specified example. This flag may be specified multiple
           times and supports common Unix glob patterns.

       --examples
           Build all example targets.

       --test name...
           Build the specified integration test. This flag may be specified
           multiple times and supports common Unix glob patterns.

       --tests
           Build all targets in test mode that have the test = true manifest
           flag set. By default this includes the library and binaries built as
           unittests, and integration tests. Be aware that this will also build
           any required dependencies, so the lib target may be built twice
           (once as a unittest, and once as a dependency for binaries,
           integration tests, etc.). Targets may be enabled or disabled by
           setting the test flag in the manifest settings for the target.

       --bench name...
           Build the specified benchmark. This flag may be specified multiple
           times and supports common Unix glob patterns.

       --benches
           Build all targets in benchmark mode that have the bench = true
           manifest flag set. By default this includes the library and binaries
           built as benchmarks, and bench targets. Be aware that this will also
           build any required dependencies, so the lib target may be built
           twice (once as a benchmark, and once as a dependency for binaries,
           benchmarks, etc.). Targets may be enabled or disabled by setting the
           bench flag in the manifest settings for the target.

       --all-targets
           Build all targets. This is equivalent to specifying --lib --bins
           --tests --benches --examples.

   特性选择

       可通过传递特性参数来控制启用哪些特性。如果没有给定要使用的特性，
       则每个已选择的包都会自动使用default特性。

       详见the features documentation
       <https://doc.rust-lang.org/cargo/reference/features.html#command-line-feature-options>。

       --features features

           传递以空格或者逗号分隔的列表，其中给出要启用的特性。工作区成员的特性可通过包名/特性名的语法启用。
           此参数可多次给定，以分别启用给定的特性。

       --all-features
           为给定的包启用全部可用特性

       --no-default-features
           不启用给定包的default特性

   Compilation Options
       --target triple
           为指定架构执行 Build
           。默认情况下为本机的架构。三元组的格式为
           <arch><sub>-<vendor>-<sys>-<abi>。执行 rustc --print target-list
           可得到支持的构建目标列表。

           也可通过build.target指定(config value
           <https://doc.rust-lang.org/cargo/reference/config.html>)。


           注意，指定该标志参数会使Cargo产生的构建工件放在与平常不同的目录下。
           详情参见build cache
           <https://doc.rust-lang.org/cargo/guide/build-cache.html>

       -r, --release
           Build optimized artifacts with the release profile. See also the
           --profile option for choosing a specific profile by name.

       --profile name
           Build with the given profile.

           The rustc subcommand will treat the following named profiles with
           special behaviors:

           o  check — Builds in the same way as the cargo-check(1) command
              with the dev profile.

           o  test — Builds in the same way as the cargo-test(1) command,
              enabling building in test mode which will enable tests and enable
              the test cfg option. See rustc tests
              <https://doc.rust-lang.org/rustc/tests/index.html> for more
              detail.

           o  bench — Builds in the same was as the cargo-bench(1) command,
              similar to the test profile.

           See the the reference
           <https://doc.rust-lang.org/cargo/reference/profiles.html> for more
           details on profiles.

       --ignore-rust-version
           Build the target even if the selected Rust compiler is older than
           the required Rust version as configured in the project's
           rust-version field.

   Output Options
       --target-dir directory

           用于存放生成的工件以及中间文件的目录。也可通过环境变量CARGO_TARGET_DIR
           或 build.target-dir config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。

           默认情况下为根工作区中的target目录。

   Display Options
       -v, --verbose

           启用更加详细的输出。可两次使用来显示"非常详细"的输出，其中包含了诸如
           依赖警告 以及 构建脚本输出 等额外的输出内容。
           也可通过term.verbose指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       -q, --quiet
           不输出Cargo的日志信息。也可通过term.quiet指定。
           config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --color when
           控制输出内容的颜色。有效取值如下：

           o  auto
              (默认)：自动检测终端是否支持带颜色的输出。

           o  always：总显示带颜色的输出。

           o  never：从不显示带颜色的输出。

           也可通过term.color指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --message-format fmt
           The output format for diagnostic messages. Can be specified multiple
           times and consists of comma-separated values. Valid values:

           o  human (default): Display in a human-readable text format.
              Conflicts with short and json.

           o  short: Emit shorter, human-readable text messages. Conflicts with
              human and json.

           o  json: Emit JSON messages to stdout. See the reference
              <https://doc.rust-lang.org/cargo/reference/external-tools.html#json-messages>
              for more details. Conflicts with human and short.

           o  json-diagnostic-short: Ensure the rendered field of JSON messages
              contains the "short" rendering from rustc. Cannot be used with
              human or short.

           o  json-diagnostic-rendered-ansi: Ensure the rendered field of JSON
              messages contains embedded ANSI color codes for respecting
              rustc's default color scheme. Cannot be used with human or short.

           o  json-render-diagnostics: Instruct Cargo to not include rustc
              diagnostics in in JSON messages printed, but instead Cargo itself
              should render the JSON diagnostics coming from rustc. Cargo's own
              JSON diagnostics and others coming from rustc are still emitted.
              Cannot be used with human or short.

   Manifest Options
       --manifest-path path

           用于指定Cargo.toml文件的路径。默认情况下，Cargo会在当前目录或上级目录中寻找Cargo.toml文件。

       --frozen, --locked

           这两个选项用于保证Cargo.lock文件是最新的。如果该锁文件不存在，或者不是最新的，Cargo
           会报错退出。其中--frozen选项会阻止Cargo访问网络以检查锁文件是否是最新的。


           这些选项，可用于保证Cargo.lock文件是最新的(比如持续集成的构建过程)，
           或用于避免联网。

       --offline

           禁止Cargo访问网络。如果不添加此选项，Cargo在需要访问网络但网络不可用的情况下，会报错
           并停止工作。添加此选项后，Cargo会尽可能尝试不使用网络来工作。


           注意，在此情况下可能会产生与联网状态下不同的依赖解析(Dependency
           Resolution)结果。
           Cargo只会使用本地已下载的crate，即便本地的索引副本中表明可能有新版本crate。在离线前下载
           所需依赖的方法，参见 cargo-fetch(1) 。

           也可以通过 net.offline config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。

   Common Options
       +toolchain
           If Cargo has been installed with rustup, and the first argument to
           cargo begins with +, it will be interpreted as a rustup toolchain
           name (such as +stable or +nightly). See the rustup documentation
           <https://rust-lang.github.io/rustup/overrides.html> for more
           information about how toolchain overrides work.

       -h, --help
           Prints help information.

       -Z flag
           Unstable (nightly-only) flags to Cargo. Run cargo -Z help for
           details.

   Miscellaneous Options
       -j N, --jobs N
           要并行运行的作业数量。也可通过build.jobs config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。
           默认为CPU数量。

       --future-incompat-report
           Displays a future-incompat report for any future-incompatible
           warnings produced during execution of this command

           See cargo-report(1)

环境
       关于Cargo所读取的环境变量，可参见the reference
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html>

退出状态
       o  0: Cargo命令执行成功

       o  101: Cargo命令未能完成.

EXAMPLES
       1. Check if your package (not including dependencies) uses unsafe code:

              cargo rustc --lib -- -D unsafe-code

       2. Try an experimental flag on the nightly compiler, such as this which
          prints the size of every type:

              cargo rustc --lib -- -Z print-type-sizes

SEE ALSO
       cargo(1), cargo-build(1), rustc(1)

