CARGO-INSTALL(1)

NAME
       cargo-install - Build and install a Rust binary

SYNOPSIS
       cargo install [options] crate...
       cargo install [options] --path path
       cargo install [options] --git url [crate...]
       cargo install [options] --list

DESCRIPTION
       This command manages Cargo's local set of installed binary crates. Only
       packages which have executable [[bin]] or [[example]] targets can be
       installed, and all executables are installed into the installation
       root's bin folder.

       The installation root is determined, in order of precedence:

       o  --root option

       o  CARGO_INSTALL_ROOT environment variable

       o  install.root Cargo config value
          <https://doc.rust-lang.org/cargo/reference/config.html>

       o  CARGO_HOME environment variable

       o  $HOME/.cargo

       There are multiple sources from which a crate can be installed. The
       default location is crates.io but the --git, --path, and --registry
       flags can change this source. If the source contains more than one
       package (such as crates.io or a git repository with multiple crates) the
       crate argument is required to indicate which crate should be installed.

       Crates from crates.io can optionally specify the version they wish to
       install via the --version flags, and similarly packages from git
       repositories can optionally specify the branch, tag, or revision that
       should be installed. If a crate has multiple binaries, the --bin
       argument can selectively install only one of them, and if you'd rather
       install examples the --example argument can be used as well.

       If the package is already installed, Cargo will reinstall it if the
       installed version does not appear to be up-to-date. If any of the
       following values change, then Cargo will reinstall the package:

       o  The package version and source.

       o  The set of binary names installed.

       o  The chosen features.

       o  The profile (--profile).

       o  The target (--target).

       Installing with --path will always build and install, unless there are
       conflicting binaries from another package. The --force flag may be used
       to force Cargo to always reinstall the package.

       If the source is crates.io or --git then by default the crate will be
       built in a temporary target directory. To avoid this, the target
       directory can be specified by setting the CARGO_TARGET_DIR environment
       variable to a relative path. In particular, this can be useful for
       caching build artifacts on continuous integration systems.

       By default, the Cargo.lock file that is included with the package will
       be ignored. This means that Cargo will recompute which versions of
       dependencies to use, possibly using newer versions that have been
       released since the package was published. The --locked flag can be used
       to force Cargo to use the packaged Cargo.lock file if it is available.
       This may be useful for ensuring reproducible builds, to use the exact
       same set of dependencies that were available when the package was
       published. It may also be useful if a newer version of a dependency is
       published that no longer builds on your system, or has other problems.
       The downside to using --locked is that you will not receive any fixes or
       updates to any dependency. Note that Cargo did not start publishing
       Cargo.lock files until version 1.37, which means packages published with
       prior versions will not have a Cargo.lock file available.

OPTIONS
   Install Options
       --vers version, --version version
           Specify a version to install. This may be a version requirement
           <https://doc.rust-lang.org/cargo/reference/specifying-dependencies.md>,
           like ~1.2, to have Cargo select the newest version from the given
           requirement. If the version does not have a requirement operator
           (such as ^ or ~), then it must be in the form MAJOR.MINOR.PATCH, and
           will install exactly that version; it is not treated as a caret
           requirement like Cargo dependencies are.

       --git url
           Git URL to install the specified crate from.

       --branch branch
           Branch to use when installing from git.

       --tag tag
           Tag to use when installing from git.

       --rev sha
           Specific commit to use when installing from git.

       --path path
           Filesystem path to local crate to install.

       --list
           List all installed packages and their versions.

       -f, --force
           Force overwriting existing crates or binaries. This can be used if a
           package has installed a binary with the same name as another
           package. This is also useful if something has changed on the system
           that you want to rebuild with, such as a newer version of rustc.

       --no-track
           By default, Cargo keeps track of the installed packages with a
           metadata file stored in the installation root directory. This flag
           tells Cargo not to use or create that file. With this flag, Cargo
           will refuse to overwrite any existing files unless the --force flag
           is used. This also disables Cargo's ability to protect against
           multiple concurrent invocations of Cargo installing at the same
           time.

       --bin name...
           Install only the specified binary.

       --bins
           Install all binaries.

       --example name...
           Install only the specified example.

       --examples
           Install all examples.

       --root dir
           Directory to install packages into.

       --registry registry
           Name of the registry to use. Registry names are defined in Cargo
           config files
           <https://doc.rust-lang.org/cargo/reference/config.html>. If not
           specified, the default registry is used, which is defined by the
           registry.default config key which defaults to crates-io.

       --index index
           The URL of the registry index to use.

   特性选择

       可通过传递特性参数来控制启用哪些特性。如果没有给定要使用的特性，
       则每个已选择的包都会自动使用default特性。

       详见the features documentation
       <https://doc.rust-lang.org/cargo/reference/features.html#command-line-feature-options>。

       --features features

           传递以空格或者逗号分隔的列表，其中给出要启用的特性。工作区成员的特性可通过包名/特性名的语法启用。
           此参数可多次给定，以分别启用给定的特性。

       --all-features
           为给定的包启用全部可用特性

       --no-default-features
           不启用给定包的default特性

   Compilation Options
       --target triple
           为指定架构执行 Install
           。默认情况下为本机的架构。三元组的格式为
           <arch><sub>-<vendor>-<sys>-<abi>。执行 rustc --print target-list
           可得到支持的构建目标列表。

           也可通过build.target指定(config value
           <https://doc.rust-lang.org/cargo/reference/config.html>)。


           注意，指定该标志参数会使Cargo产生的构建工件放在与平常不同的目录下。
           详情参见build cache
           <https://doc.rust-lang.org/cargo/guide/build-cache.html>

       --target-dir directory

           用于存放生成的工件以及中间文件的目录。也可通过环境变量CARGO_TARGET_DIR
           或 build.target-dir config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。

           默认情况下位于该平台临时目录下的一个新的临时文件夹。

           当指定
           --path标志参数时，若未指定--target-dir，则默认会使用工作区中的target目录。

       --debug
           Build with the dev profile instead the release profile. See also the
           --profile option for choosing a specific profile by name.

       --profile name
           Install with the given profile. See the the reference
           <https://doc.rust-lang.org/cargo/reference/profiles.html> for more
           details on profiles.

   Manifest Options
       --frozen, --locked

           这两个选项用于保证Cargo.lock文件是最新的。如果该锁文件不存在，或者不是最新的，Cargo
           会报错退出。其中--frozen选项会阻止Cargo访问网络以检查锁文件是否是最新的。


           这些选项，可用于保证Cargo.lock文件是最新的(比如持续集成的构建过程)，
           或用于避免联网。

       --offline

           禁止Cargo访问网络。如果不添加此选项，Cargo在需要访问网络但网络不可用的情况下，会报错
           并停止工作。添加此选项后，Cargo会尽可能尝试不使用网络来工作。


           注意，在此情况下可能会产生与联网状态下不同的依赖解析(Dependency
           Resolution)结果。
           Cargo只会使用本地已下载的crate，即便本地的索引副本中表明可能有新版本crate。在离线前下载
           所需依赖的方法，参见 cargo-fetch(1) 。

           也可以通过 net.offline config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。

   Miscellaneous Options
       -j N, --jobs N
           要并行运行的作业数量。也可通过build.jobs config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。
           默认为CPU数量。

   Display Options
       -v, --verbose

           启用更加详细的输出。可两次使用来显示"非常详细"的输出，其中包含了诸如
           依赖警告 以及 构建脚本输出 等额外的输出内容。
           也可通过term.verbose指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       -q, --quiet
           不输出Cargo的日志信息。也可通过term.quiet指定。
           config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --color when
           控制输出内容的颜色。有效取值如下：

           o  auto
              (默认)：自动检测终端是否支持带颜色的输出。

           o  always：总显示带颜色的输出。

           o  never：从不显示带颜色的输出。

           也可通过term.color指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --message-format fmt
           The output format for diagnostic messages. Can be specified multiple
           times and consists of comma-separated values. Valid values:

           o  human (default): Display in a human-readable text format.
              Conflicts with short and json.

           o  short: Emit shorter, human-readable text messages. Conflicts with
              human and json.

           o  json: Emit JSON messages to stdout. See the reference
              <https://doc.rust-lang.org/cargo/reference/external-tools.html#json-messages>
              for more details. Conflicts with human and short.

           o  json-diagnostic-short: Ensure the rendered field of JSON messages
              contains the "short" rendering from rustc. Cannot be used with
              human or short.

           o  json-diagnostic-rendered-ansi: Ensure the rendered field of JSON
              messages contains embedded ANSI color codes for respecting
              rustc's default color scheme. Cannot be used with human or short.

           o  json-render-diagnostics: Instruct Cargo to not include rustc
              diagnostics in in JSON messages printed, but instead Cargo itself
              should render the JSON diagnostics coming from rustc. Cargo's own
              JSON diagnostics and others coming from rustc are still emitted.
              Cannot be used with human or short.

   Common Options
       +toolchain
           If Cargo has been installed with rustup, and the first argument to
           cargo begins with +, it will be interpreted as a rustup toolchain
           name (such as +stable or +nightly). See the rustup documentation
           <https://rust-lang.github.io/rustup/overrides.html> for more
           information about how toolchain overrides work.

       -h, --help
           Prints help information.

       -Z flag
           Unstable (nightly-only) flags to Cargo. Run cargo -Z help for
           details.

环境
       关于Cargo所读取的环境变量，可参见the reference
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html>

退出状态
       o  0: Cargo命令执行成功

       o  101: Cargo命令未能完成.

EXAMPLES
       1. Install or upgrade a package from crates.io:

              cargo install ripgrep

       2. Install or reinstall the package in the current directory:

              cargo install --path .

       3. View the list of installed packages:

              cargo install --list

SEE ALSO
       cargo(1), cargo-uninstall(1), cargo-search(1), cargo-publish(1)

