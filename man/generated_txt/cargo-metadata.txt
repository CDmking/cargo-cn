CARGO-METADATA(1)

NAME
       cargo-metadata - Machine-readable metadata about the current package

SYNOPSIS
       cargo metadata [options]

DESCRIPTION
       Output JSON to stdout containing information about the workspace members
       and resolved dependencies of the current package.

       It is recommended to include the --format-version flag to future-proof
       your code to ensure the output is in the format you are expecting.

       See the cargo_metadata crate <https://crates.io/crates/cargo_metadata>
       for a Rust API for reading the metadata.

OUTPUT FORMAT
       The output has the following format:

           {
               /* Array of all packages in the workspace.
                  It also includes all feature-enabled dependencies unless --no-deps is used.
               */
               "packages": [
                   {
                       /* The name of the package. */
                       "name": "my-package",
                       /* The version of the package. */
                       "version": "0.1.0",
                       /* The Package ID, a unique identifier for referring to the package. */
                       "id": "my-package 0.1.0 (path+file:///path/to/my-package)",
                       /* The license value from the manifest, or null. */
                       "license": "MIT/Apache-2.0",
                       /* The license-file value from the manifest, or null. */
                       "license_file": "LICENSE",
                       /* The description value from the manifest, or null. */
                       "description": "Package description.",
                       /* The source ID of the package. This represents where
                          a package is retrieved from.
                          This is null for path dependencies and workspace members.
                          For other dependencies, it is a string with the format:
                          - "registry+URL" for registry-based dependencies.
                            Example: "registry+https://github.com/rust-lang/crates.io-index"
                          - "git+URL" for git-based dependencies.
                            Example: "git+https://github.com/rust-lang/cargo?rev=5e85ba14aaa20f8133863373404cb0af69eeef2c#5e85ba14aaa20f8133863373404cb0af69eeef2c"
                       */
                       "source": null,
                       /* Array of dependencies declared in the package's manifest. */
                       "dependencies": [
                           {
                               /* The name of the dependency. */
                               "name": "bitflags",
                               /* The source ID of the dependency. May be null, see
                                  description for the package source.
                               */
                               "source": "registry+https://github.com/rust-lang/crates.io-index",
                               /* The version requirement for the dependency.
                                  Dependencies without a version requirement have a value of "*".
                               */
                               "req": "^1.0",
                               /* The dependency kind.
                                  "dev", "build", or null for a normal dependency.
                               */
                               "kind": null,
                               /* If the dependency is renamed, this is the new name for
                                  the dependency as a string.  null if it is not renamed.
                               */
                               "rename": null,
                               /* Boolean of whether or not this is an optional dependency. */
                               "optional": false,
                               /* Boolean of whether or not default features are enabled. */
                               "uses_default_features": true,
                               /* Array of features enabled. */
                               "features": [],
                               /* The target platform for the dependency.
                                  null if not a target dependency.
                               */
                               "target": "cfg(windows)",
                               /* The file system path for a local path dependency.
                                  not present if not a path dependency.
                               */
                               "path": "/path/to/dep",
                               /* A string of the URL of the registry this dependency is from.
                                  If not specified or null, the dependency is from the default
                                  registry (crates.io).
                               */
                               "registry": null
                           }
                       ],
                       /* Array of Cargo targets. */
                       "targets": [
                           {
                               /* Array of target kinds.
                                  - lib targets list the `crate-type` values from the
                                    manifest such as "lib", "rlib", "dylib",
                                    "proc-macro", etc. (default ["lib"])
                                  - binary is ["bin"]
                                  - example is ["example"]
                                  - integration test is ["test"]
                                  - benchmark is ["bench"]
                                  - build script is ["custom-build"]
                               */
                               "kind": [
                                   "bin"
                               ],
                               /* Array of crate types.
                                  - lib and example libraries list the `crate-type` values
                                    from the manifest such as "lib", "rlib", "dylib",
                                    "proc-macro", etc. (default ["lib"])
                                  - all other target kinds are ["bin"]
                               */
                               "crate_types": [
                                   "bin"
                               ],
                               /* The name of the target. */
                               "name": "my-package",
                               /* Absolute path to the root source file of the target. */
                               "src_path": "/path/to/my-package/src/main.rs",
                               /* The Rust edition of the target.
                                  Defaults to the package edition.
                               */
                               "edition": "2018",
                               /* Array of required features.
                                  This property is not included if no required features are set.
                               */
                               "required-features": ["feat1"],
                               /* Whether the target should be documented by `cargo doc`. */
                               "doc": true,
                               /* Whether or not this target has doc tests enabled, and
                                  the target is compatible with doc testing.
                               */
                               "doctest": false,
                               /* Whether or not this target should be built and run with `--test`
                               */
                               "test": true
                           }
                       ],
                       /* Set of features defined for the package.
                          Each feature maps to an array of features or dependencies it
                          enables.
                       */
                       "features": {
                           "default": [
                               "feat1"
                           ],
                           "feat1": [],
                           "feat2": []
                       },
                       /* Absolute path to this package's manifest. */
                       "manifest_path": "/path/to/my-package/Cargo.toml",
                       /* Package metadata.
                          This is null if no metadata is specified.
                       */
                       "metadata": {
                           "docs": {
                               "rs": {
                                   "all-features": true
                               }
                           }
                       },
                       /* List of registries to which this package may be published.
                          Publishing is unrestricted if null, and forbidden if an empty array. */
                       "publish": [
                           "crates-io"
                       ],
                       /* Array of authors from the manifest.
                          Empty array if no authors specified.
                       */
                       "authors": [
                           "Jane Doe <user@example.com>"
                       ],
                       /* Array of categories from the manifest. */
                       "categories": [
                           "command-line-utilities"
                       ],
                       /* Optional string that is the default binary picked by cargo run. */
                       "default_run": null,
                       /* Optional string that is the minimum supported rust version */
                       "rust_version": "1.56",
                       /* Array of keywords from the manifest. */
                       "keywords": [
                           "cli"
                       ],
                       /* The readme value from the manifest or null if not specified. */
                       "readme": "README.md",
                       /* The repository value from the manifest or null if not specified. */
                       "repository": "https://github.com/rust-lang/cargo",
                       /* The homepage value from the manifest or null if not specified. */
                       "homepage": "https://rust-lang.org",
                       /* The documentation value from the manifest or null if not specified. */
                       "documentation": "https://doc.rust-lang.org/stable/std",
                       /* The default edition of the package.
                          Note that individual targets may have different editions.
                       */
                       "edition": "2018",
                       /* Optional string that is the name of a native library the package
                          is linking to.
                       */
                       "links": null,
                   }
               ],
               /* Array of members of the workspace.
                  Each entry is the Package ID for the package.
               */
               "workspace_members": [
                   "my-package 0.1.0 (path+file:///path/to/my-package)",
               ],
               // The resolved dependency graph for the entire workspace. The enabled
               // features are based on the enabled features for the "current" package.
               // Inactivated optional dependencies are not listed.
               //
               // This is null if --no-deps is specified.
               //
               // By default, this includes all dependencies for all target platforms.
               // The `--filter-platform` flag may be used to narrow to a specific
               // target triple.
               "resolve": {
                   /* Array of nodes within the dependency graph.
                      Each node is a package.
                   */
                   "nodes": [
                       {
                           /* The Package ID of this node. */
                           "id": "my-package 0.1.0 (path+file:///path/to/my-package)",
                           /* The dependencies of this package, an array of Package IDs. */
                           "dependencies": [
                               "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)"
                           ],
                           /* The dependencies of this package. This is an alternative to
                              "dependencies" which contains additional information. In
                              particular, this handles renamed dependencies.
                           */
                           "deps": [
                               {
                                   /* The name of the dependency's library target.
                                      If this is a renamed dependency, this is the new
                                      name.
                                   */
                                   "name": "bitflags",
                                   /* The Package ID of the dependency. */
                                   "pkg": "bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)",
                                   /* Array of dependency kinds. Added in Cargo 1.40. */
                                   "dep_kinds": [
                                       {
                                           /* The dependency kind.
                                              "dev", "build", or null for a normal dependency.
                                           */
                                           "kind": null,
                                           /* The target platform for the dependency.
                                              null if not a target dependency.
                                           */
                                           "target": "cfg(windows)"
                                       }
                                   ]
                               }
                           ],
                           /* Array of features enabled on this package. */
                           "features": [
                               "default"
                           ]
                       }
                   ],
                   /* The root package of the workspace.
                      This is null if this is a virtual workspace. Otherwise it is
                      the Package ID of the root package.
                   */
                   "root": "my-package 0.1.0 (path+file:///path/to/my-package)"
               },
               /* The absolute path to the build directory where Cargo places its output. */
               "target_directory": "/path/to/my-package/target",
               /* The version of the schema for this metadata structure.
                  This will be changed if incompatible changes are ever made.
               */
               "version": 1,
               /* The absolute path to the root of the workspace. */
               "workspace_root": "/path/to/my-package"
               /* Workspace metadata.
                  This is null if no metadata is specified. */
               "metadata": {
                   "docs": {
                       "rs": {
                           "all-features": true
                       }
                   }
               }
           }

OPTIONS
   Output Options
       --no-deps
           Output information only about the workspace members and don't fetch
           dependencies.

       --format-version version
           Specify the version of the output format to use. Currently 1 is the
           only possible value.

       --filter-platform triple
           This filters the resolve output to only include dependencies for the
           given target triple. Without this flag, the resolve includes all
           targets.

           Note that the dependencies listed in the "packages" array still
           includes all dependencies. Each package definition is intended to be
           an unaltered reproduction of the information within Cargo.toml.

   特性选择

       可通过传递特性参数来控制启用哪些特性。如果没有给定要使用的特性，
       则每个已选择的包都会自动使用default特性。

       详见the features documentation
       <https://doc.rust-lang.org/cargo/reference/features.html#command-line-feature-options>。

       --features features

           传递以空格或者逗号分隔的列表，其中给出要启用的特性。工作区成员的特性可通过包名/特性名的语法启用。
           此参数可多次给定，以分别启用给定的特性。

       --all-features
           为给定的包启用全部可用特性

       --no-default-features
           不启用给定包的default特性

   Display Options
       -v, --verbose

           启用更加详细的输出。可两次使用来显示"非常详细"的输出，其中包含了诸如
           依赖警告 以及 构建脚本输出 等额外的输出内容。
           也可通过term.verbose指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       -q, --quiet
           不输出Cargo的日志信息。也可通过term.quiet指定。
           config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

       --color when
           控制输出内容的颜色。有效取值如下：

           o  auto
              (默认)：自动检测终端是否支持带颜色的输出。

           o  always：总显示带颜色的输出。

           o  never：从不显示带颜色的输出。

           也可通过term.color指定。 config value
           <https://doc.rust-lang.org/cargo/reference/config.html>.

   Manifest Options
       --manifest-path path

           用于指定Cargo.toml文件的路径。默认情况下，Cargo会在当前目录或上级目录中寻找Cargo.toml文件。

       --frozen, --locked

           这两个选项用于保证Cargo.lock文件是最新的。如果该锁文件不存在，或者不是最新的，Cargo
           会报错退出。其中--frozen选项会阻止Cargo访问网络以检查锁文件是否是最新的。


           这些选项，可用于保证Cargo.lock文件是最新的(比如持续集成的构建过程)，
           或用于避免联网。

       --offline

           禁止Cargo访问网络。如果不添加此选项，Cargo在需要访问网络但网络不可用的情况下，会报错
           并停止工作。添加此选项后，Cargo会尽可能尝试不使用网络来工作。


           注意，在此情况下可能会产生与联网状态下不同的依赖解析(Dependency
           Resolution)结果。
           Cargo只会使用本地已下载的crate，即便本地的索引副本中表明可能有新版本crate。在离线前下载
           所需依赖的方法，参见 cargo-fetch(1) 。

           也可以通过 net.offline config value
           <https://doc.rust-lang.org/cargo/reference/config.html>指定。

   Common Options
       +toolchain
           If Cargo has been installed with rustup, and the first argument to
           cargo begins with +, it will be interpreted as a rustup toolchain
           name (such as +stable or +nightly). See the rustup documentation
           <https://rust-lang.github.io/rustup/overrides.html> for more
           information about how toolchain overrides work.

       -h, --help
           Prints help information.

       -Z flag
           Unstable (nightly-only) flags to Cargo. Run cargo -Z help for
           details.

环境
       关于Cargo所读取的环境变量，可参见the reference
       <https://doc.rust-lang.org/cargo/reference/environment-variables.html>

退出状态
       o  0: Cargo命令执行成功

       o  101: Cargo命令未能完成.

EXAMPLES
       1. Output JSON about the current package:

              cargo metadata --format-version=1

SEE ALSO
       cargo(1)

